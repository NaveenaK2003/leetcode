Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.




DP approach using iteration


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int[][] dp=new int[n+1][m+1];
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1.charAt(i-1)==text2.charAt(j-1))
                dp[i][j]=1+dp[i-1][j-1];
                else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
}



Recursive 


class Solution {
    public static int LCS(String text1,String text2,int n,int m,int[][] dp){
        if(n==0 || m==0){
            return 0;
        }
         if (dp[n][m] != -1) {
            return dp[n][m];
        }
        int max;
        char c1=text1.charAt(n-1);
        char c2=text2.charAt(m-1);
        if(c1==c2){
            return dp[n][m]=1+LCS(text1,text2,n-1,m-1,dp);
        }
        else
        {
            int x=LCS(text1,text2,n-1,m,dp);
            int y=LCS(text1,text2,n,m-1,dp);
            dp[n][m]=Math.max(x,y);
        }
        return dp[n][m];

    }
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int[][] dp=new int[n+1][m+1];
        for(int[] arr:dp){
            Arrays.fill(arr,-1);
        }
        int maximumLength=LCS(text1,text2,n,m,dp);
        return maximumLength;
    }
}