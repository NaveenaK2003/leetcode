
Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.



solution
 
Optimal:(kadane's algorithm)

class Solution {
    public int maxSubArray(int[] nums) {
        int max=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum=sum+nums[i];
            if(sum>max){
                max=sum;
            }
            if(sum<0)
            {
                sum=0;
            }
        }
        return max;
    }
}

better:(TLE)

class Solution {
    public int maxSubArray(int[] nums) {
        int max=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum=0;
            for(int j=i;j<nums.length;j++){
                sum+=nums[j];
                max=Math.max(max,sum);
            }   
        }
        return max;
    }
}


Brute force:

trying all possibilities

for(int i=0;i<nums.length;i++){
   for(int j=i;j<nums.length;j++){
      int sum=0;
      for(int k=i;k<=j;k++){
         sum+=arr[k];}
         if(sum>max)
           max=sum;
   }
}
return max;
    }
}