Given an array nums of distinct integers, return all the possible 
permutations
. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]




Recursive with extra space


class Solution {
    public static void generatePermutations(int[] nums,List<List<Integer>>ans,List<Integer>ds,boolean[] visited){
        if(ds.size()==nums.length)
        {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!visited[i]){
                visited[i]=true;
                ds.add(nums[i]);
                generatePermutations(nums,ans,ds,visited);
                ds.remove(ds.size()-1);
                visited[i]=false;
            }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> ds=new ArrayList<>();
        boolean[] visited=new boolean[nums.length];
        generatePermutations(nums,ans,ds,visited);
        return ans;
    }
}



Without extra space:


class Solution {

    public static void generateAllPermutations(int index,int[] nums,List<List<Integer>> ans){
        if(index==nums.length){
            List<Integer> ds=new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=index;i<nums.length;i++){
            swap(i,index,nums);
            generateAllPermutations(index+1,nums,ans);
            swap(i,index,nums);
        }
    }
    public static void swap(int i,int index,int[] nums){
        int temp=nums[i];
        nums[i]=nums[index];
        nums[index]=temp;
    }

public List<List<Integer>> permute(int[] nums) {
        
        List<List<Integer>> ans=new ArrayList<>();
        generateAllPermutations(0,nums,ans);
        return ans;

       /* List<List<Integer>> ans=new ArrayList<>();
        List<Integer> ds=new ArrayList<>();
        boolean[] visited=new boolean[nums.length];
        generatePermutations(nums,ans,ds,visited);
        return ans;*/
    }
}