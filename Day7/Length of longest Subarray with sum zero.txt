Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Examples:

Input: arr[] = {15,-2,2,-8,1,7,10,23}, n = 8
Output: 5
Explanation: The largest subarray with sum 0 is -2 2 -8 1 7.

Brute force (TLE):

class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        int cursum=0;
        int max=0;
        for(int i=0;i<n;i++){
            cursum=0;
            for(int j=i;j<n;j++){
                cursum+=arr[j];
                if(cursum==0){
                   max=Math.max(max,j-i+1);; 
                }
            }
        }
        return max;
    }
}


Optimal solution (HashMap)


class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        int maxlength=0;
        int sum=0;
       HashMap<Integer,Integer> map=new HashMap<>();
       map.put(0,-1);
       for(int i=0;i<n;i++){
           sum+=arr[i];
           if(map.containsKey(sum)){
               int index=map.get(sum);
               int len=i-index;
               maxlength=Math.max(maxlength,len);
           }
           else{
               map.put(sum,i);
           }
       }
       return maxlength;
    }
}